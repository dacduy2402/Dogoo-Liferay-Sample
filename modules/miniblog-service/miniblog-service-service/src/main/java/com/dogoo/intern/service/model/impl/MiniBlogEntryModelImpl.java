/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.intern.service.model.impl;

import com.dogoo.intern.service.model.MiniBlogEntry;
import com.dogoo.intern.service.model.MiniBlogEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MiniBlogEntry service. Represents a row in the &quot;DG_MiniBlogEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MiniBlogEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MiniBlogEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MiniBlogEntryImpl
 * @generated
 */
public class MiniBlogEntryModelImpl
	extends BaseModelImpl<MiniBlogEntry> implements MiniBlogEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mini blog entry model instance should use the <code>MiniBlogEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DG_MiniBlogEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"image", Types.VARCHAR},
		{"shortDescription", Types.VARCHAR}, {"longDescription", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longDescription", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DG_MiniBlogEntry (uuid_ VARCHAR(75) null,id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,image VARCHAR(75) null,shortDescription VARCHAR(75) null,longDescription VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DG_MiniBlogEntry";

	public static final String ORDER_BY_JPQL = " ORDER BY miniBlogEntry.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DG_MiniBlogEntry.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MiniBlogEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MiniBlogEntry.class;
	}

	@Override
	public String getModelClassName() {
		return MiniBlogEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MiniBlogEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MiniBlogEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiniBlogEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MiniBlogEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MiniBlogEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MiniBlogEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MiniBlogEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MiniBlogEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MiniBlogEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MiniBlogEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MiniBlogEntry.class.getClassLoader(), MiniBlogEntry.class,
			ModelWrapper.class);

		try {
			Constructor<MiniBlogEntry> constructor =
				(Constructor<MiniBlogEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MiniBlogEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MiniBlogEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MiniBlogEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MiniBlogEntry, Object>>();
		Map<String, BiConsumer<MiniBlogEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MiniBlogEntry, ?>>();

		attributeGetterFunctions.put("uuid", MiniBlogEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<MiniBlogEntry, String>)MiniBlogEntry::setUuid);
		attributeGetterFunctions.put("id", MiniBlogEntry::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<MiniBlogEntry, Long>)MiniBlogEntry::setId);
		attributeGetterFunctions.put("groupId", MiniBlogEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<MiniBlogEntry, Long>)MiniBlogEntry::setGroupId);
		attributeGetterFunctions.put("companyId", MiniBlogEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MiniBlogEntry, Long>)MiniBlogEntry::setCompanyId);
		attributeGetterFunctions.put("userId", MiniBlogEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MiniBlogEntry, Long>)MiniBlogEntry::setUserId);
		attributeGetterFunctions.put("userName", MiniBlogEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<MiniBlogEntry, String>)MiniBlogEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", MiniBlogEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MiniBlogEntry, Date>)MiniBlogEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", MiniBlogEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MiniBlogEntry, Date>)MiniBlogEntry::setModifiedDate);
		attributeGetterFunctions.put("title", MiniBlogEntry::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<MiniBlogEntry, String>)MiniBlogEntry::setTitle);
		attributeGetterFunctions.put("image", MiniBlogEntry::getImage);
		attributeSetterBiConsumers.put(
			"image",
			(BiConsumer<MiniBlogEntry, String>)MiniBlogEntry::setImage);
		attributeGetterFunctions.put(
			"shortDescription", MiniBlogEntry::getShortDescription);
		attributeSetterBiConsumers.put(
			"shortDescription",
			(BiConsumer<MiniBlogEntry, String>)
				MiniBlogEntry::setShortDescription);
		attributeGetterFunctions.put(
			"longDescription", MiniBlogEntry::getLongDescription);
		attributeSetterBiConsumers.put(
			"longDescription",
			(BiConsumer<MiniBlogEntry, String>)
				MiniBlogEntry::setLongDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return "";
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_image = image;
	}

	@Override
	public String getShortDescription() {
		if (_shortDescription == null) {
			return "";
		}
		else {
			return _shortDescription;
		}
	}

	@Override
	public void setShortDescription(String shortDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shortDescription = shortDescription;
	}

	@Override
	public String getLongDescription() {
		if (_longDescription == null) {
			return "";
		}
		else {
			return _longDescription;
		}
	}

	@Override
	public void setLongDescription(String longDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_longDescription = longDescription;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(MiniBlogEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MiniBlogEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MiniBlogEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MiniBlogEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MiniBlogEntryImpl miniBlogEntryImpl = new MiniBlogEntryImpl();

		miniBlogEntryImpl.setUuid(getUuid());
		miniBlogEntryImpl.setId(getId());
		miniBlogEntryImpl.setGroupId(getGroupId());
		miniBlogEntryImpl.setCompanyId(getCompanyId());
		miniBlogEntryImpl.setUserId(getUserId());
		miniBlogEntryImpl.setUserName(getUserName());
		miniBlogEntryImpl.setCreateDate(getCreateDate());
		miniBlogEntryImpl.setModifiedDate(getModifiedDate());
		miniBlogEntryImpl.setTitle(getTitle());
		miniBlogEntryImpl.setImage(getImage());
		miniBlogEntryImpl.setShortDescription(getShortDescription());
		miniBlogEntryImpl.setLongDescription(getLongDescription());

		miniBlogEntryImpl.resetOriginalValues();

		return miniBlogEntryImpl;
	}

	@Override
	public MiniBlogEntry cloneWithOriginalValues() {
		MiniBlogEntryImpl miniBlogEntryImpl = new MiniBlogEntryImpl();

		miniBlogEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		miniBlogEntryImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		miniBlogEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		miniBlogEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		miniBlogEntryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		miniBlogEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		miniBlogEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		miniBlogEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		miniBlogEntryImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		miniBlogEntryImpl.setImage(
			this.<String>getColumnOriginalValue("image"));
		miniBlogEntryImpl.setShortDescription(
			this.<String>getColumnOriginalValue("shortDescription"));
		miniBlogEntryImpl.setLongDescription(
			this.<String>getColumnOriginalValue("longDescription"));

		return miniBlogEntryImpl;
	}

	@Override
	public int compareTo(MiniBlogEntry miniBlogEntry) {
		long primaryKey = miniBlogEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MiniBlogEntry)) {
			return false;
		}

		MiniBlogEntry miniBlogEntry = (MiniBlogEntry)object;

		long primaryKey = miniBlogEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MiniBlogEntry> toCacheModel() {
		MiniBlogEntryCacheModel miniBlogEntryCacheModel =
			new MiniBlogEntryCacheModel();

		miniBlogEntryCacheModel.uuid = getUuid();

		String uuid = miniBlogEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			miniBlogEntryCacheModel.uuid = null;
		}

		miniBlogEntryCacheModel.id = getId();

		miniBlogEntryCacheModel.groupId = getGroupId();

		miniBlogEntryCacheModel.companyId = getCompanyId();

		miniBlogEntryCacheModel.userId = getUserId();

		miniBlogEntryCacheModel.userName = getUserName();

		String userName = miniBlogEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			miniBlogEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			miniBlogEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			miniBlogEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			miniBlogEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			miniBlogEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		miniBlogEntryCacheModel.title = getTitle();

		String title = miniBlogEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			miniBlogEntryCacheModel.title = null;
		}

		miniBlogEntryCacheModel.image = getImage();

		String image = miniBlogEntryCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			miniBlogEntryCacheModel.image = null;
		}

		miniBlogEntryCacheModel.shortDescription = getShortDescription();

		String shortDescription = miniBlogEntryCacheModel.shortDescription;

		if ((shortDescription != null) && (shortDescription.length() == 0)) {
			miniBlogEntryCacheModel.shortDescription = null;
		}

		miniBlogEntryCacheModel.longDescription = getLongDescription();

		String longDescription = miniBlogEntryCacheModel.longDescription;

		if ((longDescription != null) && (longDescription.length() == 0)) {
			miniBlogEntryCacheModel.longDescription = null;
		}

		return miniBlogEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MiniBlogEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MiniBlogEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiniBlogEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MiniBlogEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MiniBlogEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MiniBlogEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiniBlogEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MiniBlogEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MiniBlogEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _id;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _image;
	private String _shortDescription;
	private String _longDescription;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MiniBlogEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MiniBlogEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("image", _image);
		_columnOriginalValues.put("shortDescription", _shortDescription);
		_columnOriginalValues.put("longDescription", _longDescription);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("title", 256L);

		columnBitmasks.put("image", 512L);

		columnBitmasks.put("shortDescription", 1024L);

		columnBitmasks.put("longDescription", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MiniBlogEntry _escapedModel;

}